################################################################################
Jarvis Schultz 
January 2012

This program is a python based bootloader for the NU32v2 board that
was designed by Nick Marchuk.  Usage details can be found by executing
the script with a -h command line option.

Unix/Linux 
	./nu32_boot.py -h
Windows 
	python nu32_boot.py -h
################################################################################


################################################################################
INSTALLATION NOTES
################################################################################
---- The "hash-bang" in the very first line of the script is configured
for Debian/ Ubuntu Linux installs.  On Unix/OSx/Other, you may have
modify this path for your particular install.  Assuming python is on
your path you may also run the script as:
	python nu32_boot.py -h

---- This package assumes python is already installed and configured

---- Package has been tested in Windows, OSx, and Linux.  Other OS's
     may work, but functionality is not guaranteed.  Additionally,
     there may be some issues with running in a non-native format.
     For example, running Python through cygwin in Windows.

---- May need to add a .exe to the calls to Python in Windows,
     depending on how your environment is set up

---- The use of the python-setuptools package to install other modules
     is a very convenient way to do it e.g.

	python easy_install -U pyserial

     will install the pyserial library (if your environment is
     properly configured)

---- See the website for pyserial and/ or python-setuptools to figure
     out how to install and set them up correctly for your operating
     system

################################################################################
MODULE/PACKAGE INFO
################################################################################
REQUIRED:
	- python >= 2.5 (may work with others, tested with 2.5, 2.6 and 2.7)
	- pyserial >= 2.6 (may work with others, only tested with 2.6)

OPTIONAL
	- pkg_resources (bundled with python-setuptools)

################################################################################
CONFIGURATION OPTIONS
################################################################################
---- The program first reads a configuration file stored in your home
     directory (as determined by "os.path.expanduser('~')") called
     .nu32bootconfig.  If that file does not exist, the first time the
     program is run it will create it.  You can always recreate the file by
     passing the -s option.  For practical reasons, you may not want to
     store all options in this file.  For example, you probably don't want
     to store the -f option because you will likely be writing many
     different hex files.  Things that may be convenient to store in this
     config file include the port that your pic attaches to, and a
     directory structure that you commonly use.  For example my default
     configuration looks like the following:

	      -p /dev/ttyUSB0
	      -d /dist/default/production/

---- If you specify another local configuration file with -c, any
     options that are specified in the defaults get overwritten by
     this config file.  Local configuration files are a very
     convenient way to store settings for projects located in
     different directories.

---- All other command line options are parsed last, and they
     overwrite any configuration file options that were passed

---- The -x option can be very convenient if you have a complex
     directory structure (e.g. one created automatically by an IDE),
     and you don't want to write a new configuration file.  It
     recursively trolls either the path specified with the -d option
     or the cwd. Use it with caution though! Executing the script in,
     for example, your home directory without the -d option could take
     a long time!

---- Configuration files can use either the long or short switch
     names. Write them just like you would command line options, but
     feel free to put line breaks between options.

---- Be careful about writing things like -l or -h in your
     configuration files.  If you have, for example, -h in a
     configuration file specified with the -c option, the -h will
     override all other options and just print help.

################################################################################
HELP   
################################################################################
    Example usages:
        Unix/Linux/Cygwin:
                nu32_boot.py -f test.hex -p /dev/ttyUSB3
                nu32_boot.py -c localconfig.txt
                nu32_boot.py -f test.hex -p /dev/ttyUSB3 -w config.txt
                nu32_boot.py -l                

        Windows:
                python.exe nu32_boot.py -f test.hex -p COM6        
                python.exe nu32_boot.py -c localconfig.txt
                python.exe nu32_boot.py -f test.hex -p COM3 -w config.txt
                python.exe nu32_boot.py -l
                
    Arguments:
    -f | --file [HEXFILE]
        Specify the hex file to program to the PIC (either this or -x
        MUST be used)

    -p | --port [PORTNAME]
        Specify a port to bootload over other than the default

    -d | --directory [DIRECTORY]
        Specify a directory other than the working directory to look for hex
        files

    -c | --config [CONFIG_FILENAME]
        Specify a filename for the program to read a configuration from.
        CONFIG_FILENAME must either be in the working directory, or a path
        (relative or absolute) must be included.

    -l | --listports
        Request the program to list the available ports and exit. May not work
        on all OSs. Overrides all other args except --help.

    -s | --setdefaults [FILENAME]
        Overwrite the default configuration file stored in $HOME/.nubootconfig
        Will not write any option that does not require an argument.  If you
        really want those in a configuration file, add them manually.
        
    -w | --writedefaults [FILENAME]
        This option generates a configuration file in FILENAME, and
        writes all options parsed along with -w to FILENAME.  Will not
        write any option that does not require an argument.  If you
        really want those in a configuration file, add them manually.

    -r | --runfalse
        Providing this argument prevents the PIC from being rebooted to start
        the program running after a successful program.

    -n | --numlines [NUMLINES]
        Specify the number of lines on the *.hex file that you want to write
        per message sent to the PIC.  The upper limit is probably about 50;
        beyond there you may be exceeding the packet size limits of the FTDI
        chip on the board.  If programming is failing, playing with this
        parameter may help the situation.

    -x | --mplabx
        If this option is specified, automatically search the
        directory given by -d for a hex file, and use the first one
        found as the target hex file.  If no value is given for -d, it
        will recursively search the current working directory. Either
        this or -f must be used, -f takes precedence over -x.

    -h | --help
        Print this message, override all other args.
